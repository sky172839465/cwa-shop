// vite.config.js
import { resolve } from "path";
import { defineConfig, loadEnv } from "file:///home/sky172839465/cwa-shop/node_modules/vite/dist/node/index.js";
import react from "file:///home/sky172839465/cwa-shop/node_modules/@vitejs/plugin-react-swc/index.mjs";
import { viteMockServe } from "file:///home/sky172839465/cwa-shop/node_modules/vite-plugin-mock/dist/index.js";
import { analyzer } from "file:///home/sky172839465/cwa-shop/node_modules/vite-bundle-analyzer/dist/index.mjs";
import { sync } from "file:///home/sky172839465/cwa-shop/node_modules/glob/dist/esm/index.js";
import {
  pick
} from "file:///home/sky172839465/cwa-shop/node_modules/lodash-es/lodash.js";

// package.json
var name = "cwa-shop";
var version = "0.257.0";

// vite.config.js
var __vite_injected_original_dirname = "/home/sky172839465/cwa-shop";
var DEFAULT_ENTRY = "__index";
var {
  NODE_ENV,
  BASENAME,
  PREVIEW,
  ANALYZER,
  MOCK,
  MOCK_AWS_API,
  ENTRY = DEFAULT_ENTRY
} = process.env;
var isMock = !!MOCK;
var isMockAwsApi = !!MOCK_AWS_API;
var isPreview = !!PREVIEW;
var isAnalyzer = !!ANALYZER;
var isDefaultEntry = ENTRY === DEFAULT_ENTRY;
var isGhPage = BASENAME === "1";
var appBaseName = BASENAME && !isPreview ? `/${name}` : "";
var defaultOutDir = "dist";
var outDir = resolve(__vite_injected_original_dirname, defaultOutDir);
var envDir = resolve(__vite_injected_original_dirname, "environments");
var entriesDir = "src/sites";
var entries = sync(`${entriesDir}/**/index.html`);
var entriesMap = pick(
  Object.fromEntries(
    entries.map((entry) => {
      const key = entry.replace(`${entriesDir}/`, "").replace("/index.html", "").replace("index.html", DEFAULT_ENTRY);
      return [key, entry];
    })
  ),
  [ENTRY]
);
if (!isDefaultEntry) {
  console.log(`Build entry: ${entriesDir}/${ENTRY}`);
}
var vite_config_default = ({ mode }) => {
  const isProd = NODE_ENV === "production";
  const modeEnv = loadEnv(isMock ? "mock" : mode, envDir);
  const targetEnv = loadEnv(isProd ? "production" : "development", envDir);
  const awsHostPrefix = modeEnv.VITE_AWS_HOST_PREFIX;
  process.env = { ...process.env, ...modeEnv };
  const viteConfig = defineConfig({
    base: isProd ? BASENAME ? appBaseName : void 0 : "./",
    envDir,
    define: {
      "window.APP_VERSION": `"${version}"`,
      "window.APP_BASENAME": `"${appBaseName}"`,
      "window.AWS_HOST_PREFIX": `"${awsHostPrefix}"`,
      "window.IS_MOCK": `${isMock}`,
      "window.IS_MOCK_AWS_API": `${isMockAwsApi}`,
      "window.IS_PROD": `${isProd}`,
      "window.IS_PREVIEW": `${isPreview}`,
      "window.IS_GH_PAGE": `${isGhPage}`,
      "window.TARGET_ENV": `${JSON.stringify(targetEnv)}`,
      "window.CURRENT_ENV": `${JSON.stringify(modeEnv)}`,
      "window.ENTRY_PATH": `"/${isDefaultEntry ? "" : ENTRY}"`
    },
    root: `${entriesDir}/${isDefaultEntry ? "" : `/${ENTRY}`}`,
    plugins: [
      react(),
      viteMockServe({
        mockPath: "./src/mock",
        localEnabled: isMock
      }),
      ...isAnalyzer ? [analyzer()] : []
    ],
    build: {
      outDir: isDefaultEntry ? outDir : resolve(__vite_injected_original_dirname, `${defaultOutDir}/${ENTRY}`),
      emptyOutDir: true,
      rollupOptions: {
        input: entriesMap
      }
    },
    server: {
      proxy: {
        [awsHostPrefix]: {
          changeOrigin: true,
          secure: false,
          rewrite: (path) => path.replace(new RegExp(`^${awsHostPrefix}`), "")
        }
      }
    }
  });
  return viteConfig;
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
